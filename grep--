#!/bin/bash

#echo -e "--------Running grep-- with args" ${@} " ----------------"

pattern="${@: -1}"
path="${@: -2:1}"

echo "GREPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP $@"


#echo -e "--------Running grep-- with args" $(realpath $path) " ----------------"

function manual(){
	echo "Hi there :)
		So, you want to use Grep--. 
		Not wisely, my Padawan. 
		You can use our app to search for regex in file/s. 
		Kinda smart, don't you think?

		Basic usage: grep-- <flags> <file to search> <phrase/regex>
		<regex/regex> - regex in the form unix 'sed' takes in (for more please visit: https://www.gnu.org/software/sed/manual/html_node/Regular-Expressions-Overview.html)

		Flags
		-I					install grep-- on your computer (add to PATH)
		-h					manual (yes, this manual :v)
		-c					color results
		-i					ignore letter case (searching for 'Jon Snow' will return the same result as searching for 'JoN sNoW')
		-l 				perform a check for all in file ( you must specify file instead of pattern )
		-R 				replace regex which it finds. grep-- will ask you for word to put in
		-r					remove lines matching given phrase/regex

		grep-- works recursively by default. If you specify a file, grep-- will treat the file contents as input. If you specify a folder, grep-- will be executed for each file in that folder and then for each folder in that folder and so on, recursively.

		grep-- works in 3 different modes:
			-searching ( no flag, just fundamental use ). You can add flags:
				-c
				-i
				-l 
			-replacing regex by new regex. You can add flags:
				-i
				-l
			-deleting regex. You can add flags:
				-i
				-l
		"
}

function install() {
	pwd=`pwd`
	export PATH="$PATH:$pwd"
}

if [ $# -eq 0 ];then
	manual
	exit 1
fi

# parse script arguments 
color=0
ignoreLetterCase=0
takeArgumentsFromList=0
findAndReplace=0
removeMatchingLines=0

while getopts "IhrichRl" opt; do
	case $opt in
	I)
		install
		echo "You've installed grep in your path. Now you can run it like grep-- "
		exit 1
		;;
	h)	
		#echo "You've chosen our help"
		manual
		exit 1
		;;
	c)
		color=1
		#echo "mam flage c - kolorowanie wyniku"
		;;
	i)
		ignoreLetterCase=1
		#echo "Ignorowanie wielkości znaków"
		;;
	l)	
		takeArgumentsFromList=1
		#echo "Pobieranie wzorców z pliku"
		;;
	R)	
		findAndReplace=1
		#echo "Zamiana regexa"
		;;
	r)
		removeMatchingLines=1
		#echo "Usuwanie lini pasujących do wzorca"
		;;
	esac
done

function echoFlags(){
	echo "wzorzec toasd $pattern"
	echo 'after parsing the status of args is as follows'
	echo 'color=' $color
	echo 'ignoreLetterCase=' $ignoreLetterCase
	echo 'takeArgumentsFromList=' $takeArgumentsFromList
	echo 'findAndReplace=' $findAndReplace
	echo 'removeMatchingLines=' $removeMatchingLines
	echo -e '\n'
}

function return_lines_matching_regex() {
	file=$1
	pattern=$2

	if [ $ignoreLetterCase -eq 1 ];then
		sed_pattern='/'$pattern'/Ip'
	else
		sed_pattern='/'$pattern'/p'
	fi 

	cat $file | sed -nr $sed_pattern | printOutput
}

function find_and_replace_in_file() {
	file=$1
	pattern=$2
	replacement_string=$3
	
	if [ $ignoreLetterCase -eq 1 ];then
		sed_pattern='s/'$pattern'/'$replacement_string'/Ig'
	else
		sed_pattern='s/'$pattern'/'$replacement_string'/g'
	fi 

	sed -i $sed_pattern $file	
}

function delete_lines_that_match_from_file() {
	file=$1
	pattern=$2

	if [ $ignoreLetterCase -eq 1 ];then
		sed_pattern='/'$pattern'/Id'
	else
		sed_pattern='/'$pattern'/Id'
	fi 
	
	sed -i $sed_pattern $file	
	#cat $file  | sed -n $sed_pattern | cat
}

function printOutput() { 
echo "WCHODZI DO FUNKCJI NIEEEEEEEEEEE WCHODZI DO PETLI"
#CALY PROBLEM - NIE MA DATY ZEBY WEJSC DO PETLI JESLI FLAGA -l
if [ $color -eq 1 ];then
	RED='\033[0;31m' 
	WHITE='\033[1;37m'
	while read data; 
		do 
		echo "WCHODZI DO FUNKCJI NIEEEEEEEEEEE WCHODZI DO PETLI 2 "
			for word in $data; do 
				if [[ "${word,,}" == *"${pattern,,}"* ]];then 
					echo -ne "${RED}$word " 
				else 
					echo -ne "${WHITE}$word " 
				fi 
			done 
		echo -ne "${WHITE}\n"
	done
else
	echo
	while read data; 
		do 
		echo "WCHODZI DO FUNKCJI NIEEEEEEEEEEE WCHODZI DO PETLI 3"
			for word in $data; do 
				if [[ $word == *"$pattern"* ]];then 
					echo -ne "$word " 
				else 
					echo -ne "$word " 
				fi 
			done 
		echo
	done
fi
exit 1 
}

if [ $color -eq 1 ] && [ $findAndReplace -eq 1 ]; then
	echo "Not allowed flags use, better see option -h for some help"
	exit 1;
elif [ "$removeMatchingLines" == "$findAndReplace" ] && [ "$findAndReplace" == "1" ];then
	echo "Not allowed flags use, better see option -h for some help"
	exit 1;
elif [ "$color" == "$removeMatchingLines" ] && [ "$removeMatchingLines" == "1" ];then
	echo "Not allowed flags use, better see option -h for some help"
	exit 1;
fi

if [ $color -eq 1 ]; then
	echo -ne "\033[1;37m"
fi

function RUN() {
# run recursively
if [ -f "$path" ]; then
	#echo "$(realpath $path):"
	echo
	echo "---File $path :"
	
    if [ $findAndReplace -eq 1 ]; then
		echo "Give me word to replace regexes"
		read argument_to_replace_regex
		find_and_replace_in_file $path $pattern $argument_to_replace_regex
		
	elif [ $removeMatchingLines -eq 1 ]; then
		delete_lines_that_match_from_file $path $pattern
		
	else
		return_lines_matching_regex $path $pattern
	fi
	
	
elif [ -d "$path" ]; then
echo
	echo -e "------Directory: $path ------"
    cd $path
    for filename in *; do
		penultimate_arguments_position=$((${#@}-2))
		args_with_path_changed="${@:1:$penultimate_arguments_position} $filename ${@: -1}"
	
		echo "_________________________ $args_with_path_changed"
		grep-- $args_with_path_changed
		
	done
    cd ..
else
	echo $path "is empty or does not exist"
	exit 1
fi
}

#List or not list

function concateFlags(){
	concatedFlags="-" 
		if [ $color -eq 1 ];then
			concatedFlags+="c" 
		fi
		
		if [ $ignoreLetterCase -eq 1 ];then
			concatedFlags+="i" 
		fi
		
		if [ $findAndReplace -eq 1 ];then
			concatedFlags+="R" 
		fi
		
		if [ $removeMatchingLines -eq 1 ]; then
			concatedFlags+="r" 
		fi
}

if [ $takeArgumentsFromList -eq 1 ]; then

	echo
	while read x; do
		concateFlags
		echo "$concatedFlags $path $x"
		echo "$@"
		#RUN $concatedFlags $path $x
		RUN $concatedFlags $path $x
	done < $pattern
	
else 
	RUN $@
fi

